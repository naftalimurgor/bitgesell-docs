"use strict";(self.webpackChunkbitgesell_docs=self.webpackChunkbitgesell_docs||[]).push([[5850],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:5},i="Interact with Bitgesell Via the commandline",o={unversionedId:"cli/interact-with-bitgesell-via-cli",id:"cli/interact-with-bitgesell-via-cli",title:"Interact with Bitgesell Via the commandline",description:"Let's learn how we can interact with Bigtesell via the commandline or a terminal",source:"@site/docs/cli/interact-with-bitgesell-via-cli.md",sourceDirName:"cli",slug:"/cli/interact-with-bitgesell-via-cli",permalink:"/docs/cli/interact-with-bitgesell-via-cli",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/interact-with-bitgesell-via-cli.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"CLI",permalink:"/docs/category/cli"},next:{title:"WBGL Bridge",permalink:"/docs/category/wbgl-bridge"}},s={},c=[{value:"Using <code>bgld-cli</code>",id:"using-bgld-cli",level:2},{value:"1. Installation",id:"1-installation",level:3},{value:"3. Create an Address",id:"3-create-an-address",level:4},{value:"4. Create a Wallet",id:"4-create-a-wallet",level:4}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interact-with-bitgesell-via-the-commandline"},"Interact with Bitgesell Via the commandline"),(0,r.kt)("p",null,"Let's learn how we can interact with Bigtesell via the commandline or a terminal"),(0,r.kt)("h2",{id:"using-bgld-cli"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"bgld-cli")),(0,r.kt)("p",null,"Note: this is still in beta and under development,hence experimental"),(0,r.kt)("p",null,"A CLI tool for interacting with the Bitgesell blockchain network for managing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Addresses"),(0,r.kt)("li",{parentName:"ul"},"Private Keys"),(0,r.kt)("li",{parentName:"ul"},"Transactions (WIP)"),(0,r.kt)("li",{parentName:"ul"},"Wallets")),(0,r.kt)("h3",{id:"1-installation"},"1. Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm i -g bgld-cli # yarn add --global bgld-cli\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"bgld-cli")," is still in beta."),(0,r.kt)("h3",{parentName:"blockquote",id:"2-usage"},"2. Usage")),(0,r.kt)("p",null,"Basic help and ",(0,r.kt)("inlineCode",{parentName:"p"},"bgld-cli")," version can be checked by simply typing the following on a terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nmurgor@nmurgor:$ bgld-cli\nUsage: bgld-cli [options] [command]\n\nbgld-cli, - A cli utility for interacting with the Bitgesell Blockchain Network\n\nOptions:\n  -V, --version             output the version number\n  -h, --help                display help for command\n\nCommands:\n  address <--network>       Generate an an address (base58 encoded)\n  wallet <--network>        Generate a Wallet\n  transactions <--network>  encode at transaction [WIP]\n  help [command]            display help for command\n")),(0,r.kt)("h4",{id:"3-create-an-address"},"3. Create an Address"),(0,r.kt)("p",null,"Currently supports interaction with mainnet. Tesnet will be added in future releases."),(0,r.kt)("p",null,"All addresses(Public/Private key pairs) are exported to the home folder in JSON format:"),(0,r.kt)("p",null,"To generate an address:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nmurgor@nmurgor:$ bgld-cli address mainnet # address <network>\nGenertated address for Mainnet(base58): bgl1q83vpa00xcv38swrquhggvvwafxsdwklsffa80m\nPrivate Key(hex): 6c67b1f1b9f3c587fd6c257e2e1fdf2f67922de04e3c57f441a4d49616a0766d\nSaved to : /home/nmurgor/bgl1q83vpa00xcv38swrquhggvvwafxsdwklsffa80m.json\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: Always keep your keys safe. Anyone with access to private keys can drain your Wallet.")),(0,r.kt)("h4",{id:"4-create-a-wallet"},"4. Create a Wallet"),(0,r.kt)("p",null,"Currently supports interaction with mainnet. Testnet will be added in the next stable release."),(0,r.kt)("p",null,"All Wallets(Public/Private key pairs) are exported to the home folder in JSON format:"),(0,r.kt)("p",null,"To generate a wallet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nmurgor@nmurgor:$ bgld-cli address mainnet # address <network>\nGenertated address for Mainnet(base58): bgl1q83vpa00xcv38swrquhggvvwafxsdwklsffa80m\nPrivate Key(hex): 6c67b1f1b9f3c587fd6c257e2e1fdf2f67922de04e3c57f441a4d49616a0766d\nSaved to : /home/nmurgor/bgl1q83vpa00xcv38swrquhggvvwafxsdwklsffa80m.json\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: Always keep your keys safe. Anyone with access to private keys can drain your Wallet.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nmurgor@nmurgor$ bgld-cli wallet mainnet\nSuccessfully generated wallet for mainnet: \n\nWallet PrivateKey: zprvAdZDy3B88MeASBzRxuhba6VJJYAjuafpDcxJT8pubKQ9dZsGv736BmtxGN9cBTbfHmaokvKUG7KEorSkhHDXgdg5jC1HrCg98VFestGJMbE\n\nWallet seed phrase: electric deer creek blood corn gasp lonely travel speak below clutch outside scout deliver detail weapon accident donor upon business adult together donor shiver\nSaved to : /home/nmurgor/wallet.json\n\n")),(0,r.kt)("p",null,"Feel free to contribute to this CLI utilily, all contributions are welcome. The implementation can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/naftalimurgor/bgld-cli"},"here")))}p.isMDXComponent=!0}}]);